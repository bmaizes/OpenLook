{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../results/results.component\";\nfunction SearchComponent_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function SearchComponent_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.loadPrev());\n    });\n    i0.ɵɵtext(1, \"Load Previous\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SearchComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function SearchComponent_button_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.loadMore());\n    });\n    i0.ɵɵtext(1, \"Load More\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let SearchComponent = /*#__PURE__*/(() => {\n  class SearchComponent {\n    constructor(http) {\n      this.http = http;\n      this.selectedServiceIds = [];\n      this.selectedCountryId = '';\n      this.result = [];\n      this.cursorStack = [];\n      this.hasMore = false; // Add hasMore property\n    }\n\n    handleSearch() {\n      // Get the input value from the search bar\n      const searchInput = document.getElementById('searchInput');\n      const userInput = searchInput.value;\n      // Call a TypeScript function with the user input\n      this.searchByFilter(userInput);\n    }\n    loadMore() {\n      // Add logic to load more results using the cursor\n      // Update the API call with the appropriate cursor value\n      // Set hasMore property based on the response\n      const searchInput = document.getElementById('searchInput');\n      const userInput = searchInput.value;\n      const options = {\n        method: 'GET',\n        url: 'https://vndjn3z2ce5koorpy42okoapja0ppjti.lambda-url.us-east-1.on.aws',\n        params: {\n          services: this.selectedServiceIds,\n          country: this.selectedCountryId,\n          keyword: userInput,\n          // cursor: encodeURIComponent(this.result.nextCursor),\n          cursor: this.result.nextCursor,\n          language: 'en'\n        }\n      };\n      this.cursorStack.push(this.result.nextCursor);\n      this.http.get(options.url, options).subscribe(response => {\n        console.log(this.cursorStack);\n        console.log('Response:', response);\n        this.result = response;\n        this.hasMore = response.hasMore; // Set hasMore based on the response\n      }, error => {\n        console.error('Error:', error);\n      });\n    }\n    loadPrev() {\n      // Add logic to load more results using the cursor\n      // Update the API call with the appropriate cursor value\n      // Set hasMore property based on the response\n      const searchInput = document.getElementById('searchInput');\n      const userInput = searchInput.value;\n      const prev = this.cursorStack.length >= 2 ? this.cursorStack[this.cursorStack.length - 2] : null;\n      this.cursorStack.pop();\n      console.log(prev);\n      const params = {\n        services: this.selectedServiceIds,\n        country: this.selectedCountryId,\n        keyword: userInput,\n        language: 'en'\n      };\n      if (prev !== null && prev !== undefined) {\n        params.cursor = prev;\n      }\n      const options = {\n        method: 'GET',\n        url: 'https://vndjn3z2ce5koorpy42okoapja0ppjti.lambda-url.us-east-1.on.aws',\n        params: params\n      };\n      // this.cursorStack.push(this.result.nextCursor)\n      this.http.get(options.url, options).subscribe(response => {\n        console.log(this.cursorStack);\n        console.log('Response:', response);\n        this.result = response;\n        this.hasMore = response.hasMore; // Set hasMore based on the response\n      }, error => {\n        console.error('Error:', error);\n      });\n    }\n    searchFunction(query) {\n      // Do something with the search query, for example, log it to the console\n      console.log('User searched for: ' + query);\n    }\n    // searchByFilter(query: string) {\n    //   // this.genres = mockGenres\n    //   const options = {\n    //     method: 'GET',\n    //     url: 'https://streaming-availability.p.rapidapi.com/search/filters',\n    //     params: {\n    //       services: this.selectedServiceIds,\n    //       country: this.selectedCountryId,\n    //       keyword: query,\n    //       output_language: 'en',\n    //       order_by: 'original_title',\n    //       genres_relation: 'and',\n    //       show_type: 'all'\n    //     },\n    //     headers: {\n    //       'X-RapidAPI-Key': '2cdd5bb74fmsh7cb05bb1e97935ap14c4d2jsne222a4828ed5',\n    //       'X-RapidAPI-Host': 'streaming-availability.p.rapidapi.com'\n    //     }\n    //   };\n    //   return this.http.get<any>(options.url, options).subscribe(\n    //     response => {\n    //       console.log(response)\n    //     },\n    //     error => {\n    //       console.error('Error:', error);\n    //     }\n    //   );\n    // }\n    // searchByFilter(query: string) {\n    //   console.log(this.selectedServiceIds)\n    //   const options = {\n    //     method: 'GET',\n    //     url: 'https://qsihe4v2fghltodimsopstzk2e0atkgv.lambda-url.us-east-1.on.aws',\n    //     params: {\n    //       country: this.selectedCountryId,\n    //       title: query,\n    //       language: 'en',\n    //     },\n    //   };\n    //   return this.http.get<any>(options.url, options).subscribe(\n    //     response => {\n    //       console.log('Response:', response);\n    //       this.result = response;\n    //     },\n    //     error => {\n    //       console.error('Error:', error);\n    //     }\n    //   );\n    // }\n    searchByFilter(query) {\n      let to_input = null;\n      if (this.selectedServiceIds.length == 0) {\n        const options = {\n          method: 'GET',\n          url: 'https://qsihe4v2fghltodimsopstzk2e0atkgv.lambda-url.us-east-1.on.aws',\n          params: {\n            country: this.selectedCountryId,\n            title: query,\n            language: 'en'\n          }\n        };\n        to_input = options;\n      } else {\n        const options = {\n          method: 'GET',\n          url: 'https://vndjn3z2ce5koorpy42okoapja0ppjti.lambda-url.us-east-1.on.aws',\n          params: {\n            services: this.selectedServiceIds,\n            country: this.selectedCountryId,\n            keyword: query,\n            language: 'en'\n          }\n        };\n        to_input = options;\n      }\n      // this.prevCursor = this.result.nextCursor;\n      this.cursorStack.push(this.result.nextCursor);\n      this.http.get(to_input.url, to_input).subscribe(response => {\n        console.log('Response:', response);\n        console.log(this.cursorStack);\n        this.result = response;\n        this.hasMore = response.hasMore; // Set hasMore based on the response\n      }, error => {\n        console.error('Error:', error);\n      });\n    }\n    static #_ = this.ɵfac = function SearchComponent_Factory(t) {\n      return new (t || SearchComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SearchComponent,\n      selectors: [[\"app-search\"]],\n      inputs: {\n        selectedServiceIds: \"selectedServiceIds\",\n        selectedCountryId: \"selectedCountryId\"\n      },\n      decls: 8,\n      vars: 4,\n      consts: [[\"type\", \"text\", \"id\", \"searchInput\", \"placeholder\", \"Enter your search query\"], [3, \"click\"], [3, \"movies\", \"shows\"], [3, \"click\", 4, \"ngIf\"]],\n      template: function SearchComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h1\");\n          i0.ɵɵtext(1, \"Search for media: \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(2, \"input\", 0);\n          i0.ɵɵelementStart(3, \"button\", 1);\n          i0.ɵɵlistener(\"click\", function SearchComponent_Template_button_click_3_listener() {\n            return ctx.handleSearch();\n          });\n          i0.ɵɵtext(4, \"Search\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(5, \"app-results\", 2);\n          i0.ɵɵtemplate(6, SearchComponent_button_6_Template, 2, 0, \"button\", 3);\n          i0.ɵɵtemplate(7, SearchComponent_button_7_Template, 2, 0, \"button\", 3);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"movies\", ctx.result.movies)(\"shows\", ctx.result.shows);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.cursorStack.length > 1);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.hasMore);\n        }\n      },\n      dependencies: [i2.NgIf, i3.ResultsComponent]\n    });\n  }\n  return SearchComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}